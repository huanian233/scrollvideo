{"version":3,"sources":["assets/4Kjd1.mp4","assets/4K宇宙1.mp4","assets/4K宇宙2.mp4","ScenceComponents.tsx","glsl/vertex.js","glsl/fragment.js","App.tsx","reportWebVitals.ts","TipsComponents.tsx","index.tsx"],"names":["ScrollScence","canvas","_render","_sence","_camera","_plane","_material","_time","_speed","_position","_videos","_loader","THREE","onResize","w","window","innerWidth","h","innerHeight","setSize","aspect","dist","position","z","fov","Math","PI","atan","uniforms","uvRate1","value","y","scale","x","updateProjectionMatrix","onWheel","event","deltaY","raf","i","round","dif","abs","progress","curslide","floor","length","nextslide","console","log","texture1","texture2","requestAnimationFrame","container","document","getElementById","this","setPixelRatio","devicePixelRatio","set","loadVideoTexture","video1","video2","video3","side","time","type","pixels","accel","vertexShader","fragmentShader","add","comrender","render","src","video","createElement","muted","loop","autoplay","texture","minFilter","magFilter","load","play","catch","App","props","_scence","_canvasid","CreateScence","addEventListener","id","React","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ScrollTips","style","height","zIndex","top","left","right","bottom","padding","display","flexDirection","justifyContent","alignItems","color","fontFamily","pointerEvents","fontSize","textShadow","href","bannerColor","ReactDOM","StrictMode"],"mappings":"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","file":"static/js/main.fdc886e2.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/4Kjd1.881c2cd5.mp4\";","export default __webpack_public_path__ + \"static/media/4K宇宙1.30130b14.mp4\";","export default __webpack_public_path__ + \"static/media/4K宇宙2.f91cb95f.mp4\";","import * as THREE from \"three\";\r\nimport video1 from './assets/4Kjd1.mp4'\r\nimport video2 from './assets/4K宇宙1.mp4'\r\nimport video3 from './assets/4K宇宙2.mp4'\r\n\r\n// import image1 from './assets/image1.jpg'\r\n// import image2 from './assets/image2.jpg'\r\n// import image3 from './assets/image3.jpeg'\r\nimport {Texture} from \"three\";\r\nimport fragment from './glsl/fragment'\r\nimport vertex from './glsl/vertex'\r\n\r\nexport class ScrollScence {\r\n    private _render: THREE.WebGLRenderer;\r\n\r\n    private _sence: THREE.Scene;\r\n\r\n    private _camera: THREE.PerspectiveCamera;\r\n\r\n    private _plane?: THREE.Mesh;\r\n\r\n    private _material?: THREE.ShaderMaterial;\r\n\r\n    private _time: number = 0;\r\n\r\n    private _speed: number = 0;\r\n\r\n    private _position: number = 9;\r\n\r\n    private _videos: Texture[];\r\n\r\n    private _loader: THREE.TextureLoader = new THREE.TextureLoader();\r\n\r\n\r\n\r\n    constructor(canvas: string) {\r\n        // console.log(image1.length, image2.length, image3.length)\r\n        const container = document.getElementById(canvas) as HTMLCanvasElement;\r\n\r\n        this._sence = new THREE.Scene();\r\n\r\n        this._render = new THREE.WebGLRenderer({canvas: container});\r\n\r\n        this._render.setPixelRatio(window.devicePixelRatio);\r\n        this._render.setSize(window.innerWidth, window.innerHeight);\r\n\r\n        // container.appendChild(this._render.domElement);\r\n        this._camera = new THREE.PerspectiveCamera(\r\n            70,\r\n            window.innerWidth / window.innerHeight,\r\n            0.001, 100\r\n        );\r\n        this._camera.position.set( 0, 0, 1 );\r\n        this._videos = [\r\n            loadVideoTexture(video1),\r\n            loadVideoTexture(video2),\r\n            loadVideoTexture(video3),\r\n\r\n            // this._loader.load(image1, this.updateTextureOnResize),\r\n            // this._loader.load(image2, this.updateTextureOnResize),\r\n            // this._loader.load(image3, this.updateTextureOnResize),\r\n        ];\r\n\r\n\r\n\r\n\r\n    }\r\n\r\n\r\n    public CreateScence(): void{\r\n\r\n        this._material = new THREE.ShaderMaterial( {\r\n            side: THREE.DoubleSide,\r\n            uniforms: {\r\n                time: { type: 'f', value: this._time } as any,\r\n                pixels: {type: 'v2', value: new THREE.Vector2(window.innerWidth,window.innerHeight)} as any,\r\n                accel: {type: 'v2', value: new THREE.Vector2(0.5,2)} as any,\r\n                progress: {type: 'f', value: 0} as any,\r\n                uvRate1: {\r\n                    value: new THREE.Vector2(1,1)\r\n                },\r\n                texture1: {\r\n                    value: this._videos[0]\r\n                },\r\n                texture2: {\r\n                    value: this._videos[1]\r\n                },\r\n            },\r\n            // wireframe: true,\r\n            vertexShader: vertex,\r\n            fragmentShader: fragment\r\n        });\r\n\r\n        this._plane = new THREE.Mesh(new THREE.PlaneGeometry( 1,1, 1, 1 ), this._material);\r\n        this._sence.add(this._plane);\r\n        this.onResize();\r\n\r\n\r\n    }\r\n\r\n    public onResize = () =>{\r\n        const w = window.innerWidth;\r\n        const h = window.innerHeight;\r\n        if(this._render){\r\n            this._render.setSize( w, h );\r\n        }\r\n\r\n        if(this._camera){\r\n            this._camera.aspect = w / h;\r\n            let dist  = this._camera.position.z - this._plane!.position.z;\r\n            let height = 1;\r\n            this._camera.fov = 2*(180/Math.PI)*Math.atan(height/(2*dist));\r\n        }\r\n\r\n        if(this._material){\r\n            this._material!.uniforms.uvRate1.value.y = h / w;\r\n        }\r\n\r\n\r\n\r\n        if(this._plane){\r\n            this._plane!.scale.x = w/h;\r\n        }\r\n\r\n        if(this._camera){\r\n            this._camera.updateProjectionMatrix();\r\n        }\r\n\r\n\r\n\r\n    }\r\n\r\n    public render() : void{\r\n        const comrender = () => {\r\n            this._time = this._time+0.05;\r\n            this._material!.uniforms.time.value = this._time;\r\n            requestAnimationFrame(comrender);\r\n            this._render.render(this._sence, this._camera);\r\n        }\r\n        comrender();\r\n\r\n    }\r\n\r\n    public onWheel = (event: WheelEvent) => {\r\n        this._speed+=event.deltaY*0.0002;\r\n    }\r\n\r\n    public raf = () => {\r\n        this._position += this._speed;\r\n        this._speed *=0.7;\r\n\r\n\r\n        let i = Math.round(this._position);\r\n        let dif = i - this._position;\r\n\r\n        this._position += dif*0.035;\r\n        if(Math.abs(i - this._position)<0.001) {\r\n            this._position = i;\r\n        }\r\n\r\n\r\n        this._material!.uniforms.progress.value = this._position;\r\n\r\n\r\n        let curslide = (Math.floor(this._position) - 1 + this._videos.length)%this._videos.length;\r\n        let nextslide = (((Math.floor(this._position) + 1)%this._videos.length -1) + this._videos.length)%this._videos.length;\r\n        console.log(curslide,nextslide);\r\n        this._material!.uniforms.texture1.value = this._videos[curslide];\r\n        this._material!.uniforms.texture2.value = this._videos[nextslide];\r\n        window.requestAnimationFrame(this.raf);\r\n    }\r\n\r\n    // public updateTextureOnResize = (texture: Texture) => {\r\n    //\r\n    // }\r\n\r\n}\r\n\r\nexport function loadVideoTexture(src: string): THREE.VideoTexture{\r\n    const video = document.createElement('video')\r\n    video.muted = true\r\n    video.loop = true\r\n    video.autoplay = true\r\n    video.src = src;\r\n\r\n    const texture = new THREE.VideoTexture(video)\r\n    texture.minFilter = THREE.LinearFilter;\r\n    texture.magFilter = THREE.LinearFilter;\r\n    video.load();\r\n    const play = video.play()\r\n    if (play) {\r\n        play.catch(() => undefined)\r\n    }\r\n    return texture;\r\n}\r\n\r\n","export default `\nuniform float time;\nvarying vec2 vUv;\nvarying vec2 vUv1;\nvarying vec4 vPosition;\n\nuniform sampler2D texture1;\nuniform sampler2D texture2;\nuniform vec2 pixels;\nuniform vec2 uvRate1;\n\nvoid main() {\n  vUv = uv;\n  vec2 _uv = uv - 0.5;\n  vUv1 = _uv;\n  vUv1 *= uvRate1.xy;\n\n  vUv1 += 0.5;\n\n\n\n  gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}`","export default `\nuniform float time;\nuniform float progress;\nuniform sampler2D texture1;\nuniform sampler2D texture2;\nuniform vec2 pixels;\nuniform vec2 uvRate1;\nuniform vec2 accel;\n\nvarying vec2 vUv;\nvarying vec2 vUv1;\nvarying vec4 vPosition;\n\n\nvec2 mirrored(vec2 v) {\n\tvec2 m = mod(v,2.);\n\treturn mix(m,2.0 - m, step(1.0 ,m));\n}\n\nfloat tri(float p) {\n\treturn mix(p,1.0 - p, step(0.5 ,p))*2.;\n}\n\n\nvoid main()\t{\n\tvec2 uv = gl_FragCoord.xy/pixels.xy;\n\t\n\tfloat p = fract(progress);\n\n\tfloat delayValue = p*7. - uv.y*2. + uv.x - 2.;\n\n\tdelayValue = clamp(delayValue,0.,1.);\n\n\tvec2 translateValue = p + delayValue*accel;\n\tvec2 translateValue1 = vec2(-0.5,1.)* translateValue;\n\tvec2 translateValue2 = vec2(-0.5,1.)* (translateValue - 1. - accel);\n\n\tvec2 w = sin( sin(time)*vec2(0,0.3) + vUv.yx*vec2(0,4.))*vec2(0,0.5);\n\tvec2 xy = w*(tri(p)*0.5 + tri(delayValue)*0.5);\n\n\tvec2 uv1 = vUv1 + translateValue1 + xy;\n\tvec2 uv2 = vUv1 + translateValue2 + xy;\n\n\tvec4 rgba1 = texture2D(texture1,mirrored(uv1));\n\tvec4 rgba2 = texture2D(texture2,mirrored(uv2));\n\n\tvec4 rgba = mix(rgba1,rgba2,delayValue);\n\tgl_FragColor = rgba;\n\t// gl_FragColor = vec4(tri(progress));\n\t// gl_FragColor = vec4(delayValue);\n\t// gl_FragColor = vec4(delayValue);\n//\t gl_FragColor = vec4(uv,1.,1.);\n}`","import React from \"react\";\n\nimport { ScrollScence } from \"./ScenceComponents\"// uses above component in same directory\n\nimport \"./App.css\";\n\nexport class App extends React.Component{\n  private _scence?: ScrollScence;\n  private _canvasid: string = 'renderCanvas';\n  constructor(props: any) {\n    super(props);\n  }\n\n  public componentDidMount() {\n    this._scence = new ScrollScence( this._canvasid);\n    this._scence.CreateScence();\n    window.addEventListener('resize', this._scence.onResize);\n    this._scence.render();\n    window.addEventListener('wheel', this._scence.onWheel);\n    this._scence.raf();\n\n\n  }\n\n  public render() {\n    const id = this._canvasid;\n    return <canvas id = {id}  />;\n  }\n\n\n\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {Component} from \"react\";\r\nimport GitHubCorner from 'react-github-corner'\r\n\r\nexport default class ScrollTips extends Component {\r\n    render (){\r\n        return (<div\r\n            style={{\r\n                height: '100vh'\r\n            }}\r\n        >\r\n\r\n            <div\r\n            style={{\r\n                position: 'absolute',\r\n                zIndex: 1,\r\n                top: 0,\r\n                left: 0,\r\n                right: 0,\r\n                bottom: 0,\r\n                padding: '1em',\r\n                display: 'flex',\r\n                flexDirection: 'column',\r\n                justifyContent: 'center',\r\n                alignItems: 'center',\r\n                color: '#fff',\r\n                fontFamily: 'Quicksand, \"Helvetica Neue\", sans-serif',\r\n                pointerEvents: 'none'\r\n            }}\r\n        >\r\n            <h1\r\n                style={{\r\n                    fontSize: '3em',\r\n                    textShadow: '2px 2px 8px rgba(0, 0, 0, 0.5)'\r\n                }}\r\n            >\r\n                Scroll Video\r\n            </h1>\r\n\r\n            <p\r\n                style={{\r\n                    fontSize: '1.5em'\r\n                }}\r\n            >\r\n                滑动鼠标滚轮\r\n            </p>\r\n        </div>\r\n                <GitHubCorner\r\n                    href='https://github.com/transitive-bullshit/react-fluid-gallery'\r\n                    bannerColor='#70B7FD'\r\n                />\r\n        </div>\r\n        )\r\n    }\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {App} from './App';\nimport reportWebVitals from './reportWebVitals';\nimport ScrollTips from \"./TipsComponents\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n      <ScrollTips/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}